README

Project Name: Server

Github repo: https://github.com/cs0320-f23/server-karismajn-lliong.git

Project details:
The Server project creates an API that queries and retrieves data from the US Census Bureau API.
It also incorporates elements from the CSV project so that users can load, view, and search a
CSV file. Team members who worked on this project are Lisa Liong (lliong) and Karis Ma (jma78).
Lisa spent 25 hours on this project and Karis spent 25 hours on this project, totaling
to 50 hours. The time spent on this project was evenly divided between CSV functionality,
making calls to the Census API, and implementing cache. We finished the cache before it was
announced that the cache will not be graded.

Design choices:
The Server class opens our server. There are four possible endpoints: /load, /search, /view, and
/broadband. The Server class also initializes the cache.

Every Handler returns a Map that contains the requested data or a helpful error message if the
data cannot be retrieved. There are three custom exceptions that can be thrown: BadJSONException
means there was trouble parsing to/from a Json object, BadRequestException means there was an
issue with the user input, and DataSourceException means there was an issue with querying into the
Census API. BroadBandHandler gets data from CensusDatasource, which implements BroadbandDatasource
interface. CensusDatasource makes call the Census API and gets the broadband percentage. If there
was an issue with the input or retrieving data form the Census API, it returns custom errors.

On the CSV side, the Parser class parses a CSV and ProcessedFile contains all the information
about the CSV, including rows and headers. SearcherAll and SearcherIdentifier implement the
Searcher interface; SearcherAll searches all rows while SearcherIdentifier searches if the
user inputs a header.

The cache was designed as a mediator between a handler and a datasource. All the caches
implement the DataMediator interface. Using strategy pattern, we have provided three options
for cache. NoCache omits a cache. When creating a SizeCache, users can provide an args for
maximum number of entries. The cache will start evicting data once it has reached the max size,
but it may also evict data before reaching the max size. When creating a TimeCache, users
can provide args for number of secs after last access before eviction. To create a new cache
configuration, developers just need to implement the DataMediator interface.


Errors/bugs:
Errors within the Census API may create errors in our program. Although Bristol County is a county
in Rhode Island, the Census API does not have data for it. The ACS has a yearly survey and a
survey that takes place every five years. The yearly survey does not report data on counties
that do not have a lot of data. Smaller counties like Bristol County may not have available data,
which may cause our program to say the user input is a bad request.

While not an error, we encountered issues with threads that were resolved using these resources:
https://www.tabnine.com/code/java/methods/spark.Spark/stop
https://github.com/matthewgallina/smockin/blob/master/src/main/java/com/smockin
/mockserver/engine/MockedRestServerEngine.java#L126


Tests:
We have tests that test the CSV side of the project and integration tests that test the broadband
handler. We created a MockCensusData class that creates mock data so our tests don't repeatedly
make calls to the Census API. TestCensusDatasource tests methods from CensusDatasource, such as
getting state id and county id. TestBroadbandHandler is a class of integration tests that call
our API server to see if valid inputs work and if invalid inputs return the correct errors.
CSVTests are tests that test parsing and searching for /load, /view, and /search endpoints.
NoLoadTest tests if an error is returned if /view or /search are called before /load.


How to run tests and programs:
To run each test, click the green play button on top of each class.

To run /load, the URL path is /loadcsv?filepath=[INSERT FILEPATH]&&headers=[TRUE/FALSE].
Once a valid CSV has been loaded, you can search or view. To view the CSV, the URL path is
/viewcsv. To search the CSV with no headers, the URL path is /searchcsv?searchterm=[SEARCH TERM].
To search with column identifiers, the URL path is
/searchcsv?searchterm=[SEARCH TERM]&&"columnidentifier=[INT OR STRING]&&isindex=[TRUE/FALSE]".

To run /broadband, the URL path is /broadband?state=[STATE]&&county=[COUNTY]. An example of a
valid URL path is /broadband?state=California&&county=Alameda County, California.
